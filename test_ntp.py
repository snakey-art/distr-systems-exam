from general import *
from ntp import *
import unittest

class TestNtp(unittest.TestCase):
    def test_start_ntp(self):
        d1 = NTPServer()
        cd1 = Computer()
        cd1.get_service(d1)
        d1.set_host(cd1)
        result = d1.get_time().get_hours()
        self.assertEqual(result, 0)
        result = d1.get_time().get_minutes()
        self.assertEqual(result, 0)

    def test_getting_time_from_empty_net_ntp(self):
        d1 = NTPServer()
        cd1 = Computer()
        cd1.get_service(d1)
        d1.set_host(cd1)
        net = Network()
        net.add_host(cd1, "1.1.1.1")
        result = net.get_time().get_data()
        self.assertEqual(result, "X")
        result = net.get_time().get_addon()
        self.assertEqual(result, "X")

    def test_getting_time_from_net(self):
        d1 = NTPServer()
        cd1 = Computer()
        cd1.get_service(d1)
        d1.set_host(cd1)
        net = Network()
        net.add_host(cd1, "1.1.1.1")
        net.set_ntp("1.1.1.1")
        result = net.get_time().get_data()
        self.assertEqual(result, 0)
        result = net.get_time().get_addon()
        self.assertEqual(result, 0)

    def test_tick(self):
        d1 = NTPServer()
        cd1 = Computer()
        cd1.get_service(d1)
        d1.set_host(cd1)
        net = Network()
        net.add_host(cd1, "1.1.1.1")
        net.set_ntp("1.1.1.1")
        result = net.get_time().get_addon()
        self.assertEqual(result, 0)
        d1.tick()
        result = net.get_time().get_addon()
        self.assertEqual(result, 1)
        d1.tick()
        result = net.get_time().get_addon()
        self.assertEqual(result, 2)

    def test_big_tick(self):
        d1 = NTPServer()
        cd1 = Computer()
        cd1.get_service(d1)
        d1.set_host(cd1)
        net = Network()
        net.add_host(cd1, "1.1.1.1")
        net.set_ntp("1.1.1.1")
        result = net.get_time().get_data()
        self.assertEqual(result, 0)
        d1.big_tick()
        result = net.get_time().get_data()
        self.assertEqual(result, 1)
        d1.big_tick()
        result = net.get_time().get_data()
        self.assertEqual(result, 2)

    def test_get_time_by_comp_empty_ntp(self):
        d1 = NTPServer()
        cd1 = Computer()
        cd1.get_service(d1)
        d1.set_host(cd1)
        net = Network()
        net.add_host(cd1, "1.1.1.1")
        net.set_ntp("1.1.1.1")
        comp = Computer()
        comp.get_service(Timer())
        net.add_host(comp, "172.10.10.1")
        result = comp.services["Timer"].get_time().get_data()
        self.assertEqual(result, "X")
        result = comp.services["Timer"].get_time().get_addon()
        self.assertEqual(result, "X")

    def test_comp_get_ntp_then_get_time(self):
        d1 = NTPServer()
        cd1 = Computer()
        cd1.get_service(d1)
        d1.set_host(cd1)
        net = Network()
        net.add_host(cd1, "1.1.1.1")
        net.set_ntp("1.1.1.1")
        comp = Computer()
        comp.get_service(Timer())
        comp.services["Timer"].set_host(comp)
        net.add_host(comp, "172.10.10.1")
        comp.services["Timer"].get_ntp()
        result = comp.services["Timer"].get_time().get_data()
        self.assertEqual(result, 0)
        result = comp.services["Timer"].get_time().get_addon()
        self.assertEqual(result, 0)
        net.hosts[net.ntp].services["NTP_SERVER"].tick()
        result = comp.services["Timer"].get_time().get_data()
        self.assertEqual(result, 0)
        result = comp.services["Timer"].get_time().get_addon()
        self.assertEqual(result, 1)

if __name__ == '__main__':
    unittest.main()
